//* Types of Copy => Shallow and Deep

//* Shallow Copy = 

//A shallow copy copies all the member values from one object to another, including pointers. However, it doesn’t create a new copy of the dynamically allocated memory; it simply copies the memory address, so both objects end up pointing to the same memory location.

// Characteristics of Shallow Copy:
// Only copies the values of data members.
// For pointers, it copies the address, not the actual memory content.
// Changes made to the dynamically allocated memory in one object will affect the other.
// Often performed by the default copy constructor or default assignment operator generated by the compiler.

// When obj1 and obj2 go out of scope, the destructor is called for both, attempting to delete the same memory twice. This can cause undefined behavior, like crashes or memory corruption (a double delete problem). 

//* Deep Copy =

//A deep copy creates a copy of the actual dynamically allocated memory, not just the pointer. This way, each object has its own separate memory, ensuring that changes made in one object don’t affect the other.

// Characteristics of Deep Copy:
// Copies the values of all member variables and allocates separate memory for any dynamically allocated attributes.
// For pointers, it creates a new allocation and copies the actual data over.
// Safe for use with objects that manage dynamic memory, as each object has its own memory copy.
// Typically requires a custom copy constructor and assignment operator.

#include<iostream>
#include<string>
using namespace std;

class Student{
    public:
    string name;
    double* cgpaPtr;
    
    Student(string name, double cgpa){
        this->name = name;
        cgpaPtr = new double;
        *cgpaPtr = cgpa;

    }
    Student(Student &obj){
        this->name = obj.name;
        cgpaPtr = new double;
        *cgpaPtr = *obj.cgpaPtr;
    }
    void getinfo(){
        cout<<"Name: "<<name<<endl;
        cout<<"CGPA: "<<*cgpaPtr<<endl;
    }

};

int main(){
    Student s1("Rahul Kumar",8.5);
    s1.getinfo();
    Student s2(s1);
    s2.name="Shr";
    *s2.cgpaPtr=9.5;
    s2.getinfo();


    // Student s2(s1);  // Copy Constructor
    // Student s2=s1;       // Shallow copy
    // s2.getinfo();
    return 0;
}